buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${project.mc_version}-${project.mod_version}"
group = 'me.desht' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modular-routers'

ext.releaseTag = System.getenv('TAG') ?: ""
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")

def semver = mod_version
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")
version += System.getenv("BUILD_NUMBER") ?: "-CUSTOM"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${project.mc_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'modularrouters', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
            setForceExit false
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// All jar files from this folder will be added automatically as runtime mod dependencies
String extraModsDir = "extra-mods-${mc_version}"

repositories {
    mavenCentral()
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven { // TOP
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        name "JEI"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'Patchouli'
        url 'https://maven.blamejared.com/'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft([
            group  : "net.minecraftforge",
            name   : 'forge',
            version: "${project.mc_version}-${project.forge_version}"
    ])

    compileOnly(fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}"))
    runtimeOnly(fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}"))
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")
    compileOnly "com.google.errorprone:error_prone_annotations:2.0.15"

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "modularrouters",
            "Specification-Vendor": "desht",
            "Specification-Version": "32.0", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"desht",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy('reobfJar')
}

def mavenVer = ext.releaseTag == "" ? "${project.mc_version}-${semver}-SNAPSHOT" : "${project.mc_version}-${semver}"
publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
    if (System.getenv("MODMAVEN_USER") != null) {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.archivesBaseName
                version = mavenVer

                // ForgeGradle will generate wild dependency definitions, see https://github.com/MinecraftForge/ForgeGradle/issues/584
                // Since we don't actually depend on anything, just remove the entire node.
                pom.withXml {
                    asNode().remove(asNode().dependencies)
                }

                from components.java
            }
        }
        repositories {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project.modrinth_project_id}"
    versionNumber = "${project.mc_version}-${semver}"
    versionType = relType
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ["${mc_version}"] // Must be an array, even with only one version
    changelog = System.getenv("CHANGELOG")
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, or `incompatible`
        // The type can either be `project` or `version`
        optional.project "nU0bVIaL"  // Patchouli
    }
}

if (System.getenv("CURSEFORGE_TOKEN")) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = project.curse_project_id
            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG")
            releaseType = relType
            addGameVersion project.mc_version
            addGameVersion "Forge"
            mainArtifact(jar.archiveFile) {
                displayName = "${project.archivesBaseName} v${project.mc_version}-${semver}"
                relations {
                    optionalDependency "patchouli"
                }
            }
        }
    }
}
