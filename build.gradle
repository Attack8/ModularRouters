
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'eclipse'

ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

version = config.mc_version + "-" + config.mod_version
group = "me.desht"
archivesBaseName = 'modular-routers'

if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-CUSTOM"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'snapshot', version: config.mcp_mappings
    //accessTransformer = file('my_at.cfg')
    runs {
        client {
            // recommended logging data for a userdev environment
//            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'CONFIG'
            // recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }
        server {
            // recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
            args '--mod', 'modularrouters', '--all', '--output', file('src/generated/resources/')
            environment 'target', 'fmluserdevdata'
        }
    }
}

repositories {
    jcenter { }
    maven { // TOP
        name = "tterrag maven"
        url = "http://maven.tterrag.com/"
    }
    maven {
        name = "JEI"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "K-4u Mod maven"
        url = "https://modmaven.k-4u.nl/"
    }
    maven {
        name = 'Patchouli'
        url = 'http://maven.blamejared.com/'
    }
    maven {
        name = 'HWYLA'
        url = 'http://www.cursemaven.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
    compile fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}")
//    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${config.waila_version}:api")
//    runtime fg.deobf("mcp.mobius.waila:Hwyla:${config.waila_version}")
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${config.top_version}:api")
    runtime fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${config.top_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${config.jei_version}:api")
    runtime fg.deobf("mezz.jei:jei-1.16.4:${config.jei_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")
    compile "com.google.errorprone:error_prone_annotations:2.0.15"
}

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "modularrouters",
                    "Specification-Vendor": "desht",
                    "Specification-Version": "32.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${archiveVersion}",
                    "Implementation-Vendor" :"desht",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

