import me.modmuss50.mpp.ReleaseType

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.5'
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

version = "${mod_version}+mc${minecraft_version}"
group = mod_group_id

ext.releaseTag = providers.environmentVariable("TAG").orElse("").toString()
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")

// All jar files from this folder will be added automatically as runtime-only mod dependencies
def extraModsDir = "extra-mods-${minecraft_version}"

repositories {
    mavenLocal()
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        name "K-4u Mod maven"
        url "https://modmaven.dev/"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Patchouli/JEI"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "vazkii.patchouli"
            includeGroup "mezz.jei"
        }
    }
}

base {
    archivesName = archive_base_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    //implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
    //    exclude group: "net.minecraftforge", module: "forge"
    //}

    compileOnly "mcjty.theoneprobe:theoneprobe:${top_version}"

    compileOnly "curse.maven:jade-324717:${jade_curse_id}"

    // compile against the JEI API but do not include it at runtime
    compileOnly "mezz.jei:jei-1.20.2-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-1.20.2-forge-api:${jei_version}"
    // at runtime, use the full JEI
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly "extra-mods:$artifactId:$version"
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
        if (System.getenv("MODMAVEN_USER") != null) {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

Closure<ReleaseType> getReleaseType = { type ->
    switch(type) {
        case "alpha": return ReleaseType.ALPHA
        case "beta": return ReleaseType.BETA
        default: return ReleaseType.STABLE
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").orElse("dryrun")
    version = mod_version
    type = getReleaseType(relType)
    file = jar.archiveFile
    displayName = "${mod_name} ${mod_version} MC-${minecraft_version}"
    modLoaders.add("neoforge")

    curseforge {
        projectId = curse_project_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)
        projectSlug = "modular-routers"
        announcementTitle = "Download from Curseforge"
//        optional {
//            slug = "patchouli"
//        }
    }

    modrinth {
        projectId = modrinth_project_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)
        announcementTitle = "Download from Modrinth"
//        optional {
//            id = "nU0bVIaL"
//            slug = "patchouli"
//        }
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK").orElse("dryrun")
        content = changelog.map { "# A new version of Modular Routers has been released! \n" + it}
//        setPlatforms(platforms.curseforge, platforms.modrinth)
    }
}