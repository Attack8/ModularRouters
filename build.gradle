
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
//apply plugin: 'eclipse'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

version = "${mod_version}"
group = "me.desht"
archivesBaseName = "${modid}-${mc_version}"

if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-CUSTOM"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'parchment', version: '2021.08.15-1.17.1'
//    mappings channel: 'official', version: "${mappings_version}"
    //accessTransformer = file('my_at.cfg')
    runs {
        client {
            // recommended logging data for a userdev environment
//            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'CONFIG'
            // recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
//            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }
        server {
            // recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            mods {
                modularrouters {
                    source sourceSets.main
                }
            }
            args '--mod', 'modularrouters', '--all', '--output', file('src/generated/resources/'),
                '--existing', sourceSets.main.resources.srcDirs[0]
            environment 'target', 'fmluserdevdata'
        }
    }
}

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${mc_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

//    maven { // TOP
//        name = "tterrag maven"
//        url = "https://maven.tterrag.com/"
//    }
//    maven {
//        name = "JEI"
//        url = "https://dvs1.progwml6.com/files/maven"
//    }
//    maven {
//        name = "K-4u Mod maven"
//        url = "https://modmaven.dev/"
//    }
//    maven {
//        name = 'Patchouli'
//        url = 'https://maven.blamejared.com/'
//    }
////    maven {
////        name = 'HWYLA'
////        url = 'http://www.cursemaven.com/'
////    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    // temporary till TOP for 1.17.1 is on maven.tterrag.com...
    compileOnly fg.deobf("curse.maven:theoneprobe-245211:3402482")
    runtimeOnly fg.deobf("curse.maven:theoneprobe-245211:3402482")
//    compileOnly fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}")
//    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
//    runtimeOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
//    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
//    compileOnly "com.google.errorprone:error_prone_annotations:2.0.15"

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "modularrouters",
                    "Specification-Vendor": "desht",
                    "Specification-Version": "37.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"desht",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}